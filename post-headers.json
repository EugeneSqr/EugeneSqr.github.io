[{"title":"Раскрашиваем ветку Git в терминале","dateCreated":"2014-01-24","id":"color-git-branch-name-in-bash-prompt","tags":["Bash","Cygwin","Git"],"header":"#### Желаемый эффект\nЕсли вы часто пользуетесь git, то иметь название текущей ветки в своей командной строке, а так же подсвечивать \"грязные\" ветки - звучит как хорошая идея.\n\n#### Начало пути\nЯ начал \"допиливать\" командную строку после прочтения [этой статьи](http://mediadoneright.com/content/ultimate-git-ps1-bash-prompt); в ней показано много интересных вещей, однако для меня это оказалось слишком. Я хотел что-то более простое с меньшим количеством информации в командной строке. В итоге получилось вот что:","url":"/color-git-branch-name-in-bash-prompt.html"},{"title":"Создание виджета прогноза погоды с использованием Node.js и Redis","dateCreated":"2014-01-31","id":"weather-forecast-widget","tags":["Cairo","Express","Mustache","Node","Canvas","Redis","Weather Widget"],"header":"#### Что будем строить\nВ этом посте я опишу процесс создания виджета с прогнозом погоды. Я буду использовать Redis для хранения данных и связку Node.js + Express с движком Mustache для web. Модуль \"node canvas\", основанный на Cairo, будет полезен для генерации изображений на сервере.\n\n#### Weather aggregator\nДля начала нам нужно получить данные по прогнозу погоды, распарсить их, сгенерировать простенькую визуализацию и сохранить в Redis. Возложим эту работу на первый модуль и назовем его \"weather-aggregator\". Это будет простое консольное приложение, которое можно будет запускать в командной строке с определенным временным интервалом. [Сервис Яндекса](http://www.yandex.ru/) на мой взгляд как раз то, что надо.\n\nПосмотрим на содержимое package.json, чтобы понять какие зависимости у нас имеются: \n- [request](https://github.com/mikeal/request) - чтобы забирать данные с сервиса;\n- [xml2js](https://github.com/Leonidas-from-XIV/node-xml2js) - парсинг XML;\n- [canvas](https://github.com/learnboost/node-canvas) - генерация картинок;\n- [redis](https://github.com/mranney/node_redis) - угадайте что :)","url":"/weather-forecast-widget.html"},{"title":"Избирательно gzip-им сайт","dateCreated":"2014-06-02","id":"selectively-gzipping-your-site","tags":["Express","Gzip","Node"],"header":"#### Зачем\nЯ решил построить себе веб сайт. Ключевая идея - писать максимально просто, обеспечить максимальную производительность, ну и не забыть про современные техники такие как SPA и MVVM. Я выбрал связку Node + Angular + MongoDB за основу и принялся за дело. Вскоре я осознал, что мне необходимо сжимать данные при передаче, чтобы не нарушить своих амбициозных требований к производительности.\n\n#### Варианты\nПо большому счету вариантов всего два: \n- сжимать весь трафик на лету, используя специальное middleware;\n- сжать статические файлы заранее, выложить их на сервер и дать браузеру знать, что данные были сжаты.\n\nВторой подход показался мне более привлекательным, т.к. он позволял уменьшить нагрузку на процессор. Действительно, зачем сжимать что-то при каждом запросе, если это можно сделать единожды заранее?","url":"/selectively-gzipping-your-site.html"},{"title":"Selenium запрещает открывать ссылки в новой вкладке вместо нового окна в Firefox","dateCreated":"2014-07-18","id":"selenium-forbids-opening-links-in-new-tab","tags":["Selenium","Firefox","Tab"],"header":"#### Протестировать открытие новой вкладки? Не так быстро\nНедавно я тестировал приложение при помощи Selenium WebDriver и заметил, что Firefox всегда открывает ссылки с атрибутом <code>target=\"_blank\"</code> в новом окне. Я нашел способ изменить это поведение слегка поправив профиль FF:","url":"/selenium-forbids-opening-links-in-new-tab.html"},{"title":"Оптимизация web сайта","dateCreated":"2014-07-26","id":"optimizing-the-site","tags":["optimization","node","gruntjs","performance"],"header":"#### Зачем этим заниматься?\nНедавно я закончил первую итерацию построения собственного сайта, а значит, пришло время подумать над web оптимизацией. Что если не заморачиваться и оставить все как есть? Посмотрим на результаты теста [gtmetrix](http://gtmetrix.com/): \n\n<img class=\"img-responsive thumbnail center-block\" src=\"http://res.cloudinary.com/eugenesqr/image/upload/v1471942129/website-performance-optimization/gtmetrix-before-optimization.png\" alt=\"Результаты теста до оптимизации\" />\n\nОдин из тех неловких моментов, заставляющих переосмыслить происходящее. Не то чтобы меня сильно волновали оценки \"F\" и \"C\", но циферки справа огорчают. В данный момент я использую бесплатный хостинг [heroku](https://www.heroku.com/), и было бы глупо требовать от них сверхнизких таймингов. Однако, показатели по размеру загружаемой страницы и количеству запросов могли бы быть много лучше.","url":"/optimizing-the-site.html"},{"title":"Наконец я зарелизил свой сайт!","dateCreated":"2014-07-28","id":"the-site-has-finally-gone-live","tags":[],"header":"#### Наконец-то\nБезмерно рад сообщить о первом релизе своего сайта! Хотя он пока не богат на функционал, это очень важная веха в моем развитии как разработчика.\n\nВсе началось в 2012 году, когда я впервые начал выкладывать свои заметки в Интернет [используя платформу blogspot](http://eskurikhin.blogspot.com). Тогда я писал главным образом на около .net-ные темы и только на английском.\n\nГод назад я решил, что больше не хочу ограничивать себя лишь .net, что мне следует расширять свои знания за пределы экосистемы Microsoft. Я установил Linux и начал играться с Node, Mongo, Angular, JavaScript, C и vim.\n\nПару месяцев назад я решился на проверку изученных навыков. К тому времени у меня было около 20 заметок в блоге, однако, я не был в восторге от самой платформы. Так я начал строить этот сайт в свободное время.","url":"/the-site-has-finally-gone-live.html"},{"title":"Делаем IE Browser Helper Objects включенными по умолчанию","dateCreated":"2014-04-22","id":"making-ie-bho-enabled-by-default","tags":["BHO","c++","Internet Explorer"],"header":"#### Проблема \nДопустим, вы пишете классный BHO. Из соображений безопасности каждый раз, когда пользователь устанавливает BHO и запускает IE он должен подтвердить установку, нажав на кнопку в диалоговом окне. На первый взгляд - ничего особенного, один дополнительный клик никого сильно не напряжет. Однако, такое поведение IE добавляет головной боли разработчику. <code>IObjectWithSite::SetSite</code> метод не вызывается даже после утвердительного ответа пользователя. События <code>DWebBrowserEvents2</code> так же не срабатывают. Таким образом, становится затруднительно отловить момент, в который BHO пора приниматься за дело. [Здесь](http://social.msdn.microsoft.com/Forums/ie/en-US/c6f64c9e-5a34-4d6f-a20e-7bc4fc8c6bac/enable-event-for-bho-in-ie9?forum=ieextensiondevelopment) вопрос описан более детально.\n\n#### Можно ли что-нибудь с этим сделать?\nПервый шаг к решению описан [тут](http://social.technet.microsoft.com/Forums/windowsserver/en-US/6f4630a1-cbb0-41f6-8f54-b533cf451fc9/ie9-prompts-user-to-enabledisable-ie-addon-on-first-use?forum=winserverGP). Оказывается, мы можем добавить наш BHO в \"белый\" список, поместив его CLSID в нужное место. Само собой нужно автоматизировать этот процесс, дабы избавить пользователей от лишних вопросов при установке.","url":"/making-ie-bho-enabled-by-default.html"},{"title":"Локализация дат в Angular","dateCreated":"2014-08-11","id":"dates-localization-in-angular","tags":["Angular","date","localization"],"header":"#### Почему бы не использовать встроенные в Angular возможности?\nДавайте посмотрим, как в angular [можно локализовать контент](https://docs.angularjs.org/guide/i18n). Они предлагают задавать язык путем добавления на страницу соответствующую версию скрипта с локализацией. Можно немного поизвращаться, добавив логику для рендеринга нужного скриптового блока на сервере, но действительно ли мне нужно перезагружать страницу каждый раз при смене языка?\n\nДля локализации текста я использую [angular-translate](https://github.com/angular-translate/angular-translate) и мне нравится как модуль переводит текст на лету. Я просто указываю, что переводить, задаю язык, и текст заменяется без перезагрузки страницы. Вот если бы я мог применить такой же подход для локализации дат... Что-нибудь наподобие <code>mysticalFormatter.format(myDate, \\'ru\\')</code>.\n\n#### Почему бы не использовать встроенные в angular-translate возможности?\nПотому что я их не нашел. Кроме того, в действительности мои требования слишком специфичны, чтобы эффективно их удовлетворить при помощи сторонней библиотеки. Во-первых, мне нужны только два языка (английский и русский). Во-вторых, мне не нужны кучи различных форматов, по одному на каждый из языков вполне хватит. Следовательно, мне нужны локализованные наименования месяцев плюс две функции форматирования.","url":"/dates-localization-in-angular.html"},{"title":"Google Analytics в Angular","dateCreated":"2014-08-12","id":"google-analytics-in-angular","tags":["Google Analytics","Angular"],"header":"#### Важно правильно начать\nДобавление google analytics на сайт - довольно прямолинейная операция. В Интернете тонны материала на эту тему. Здесь я опишу возможный способ добавления google analytics в одностраничное приложение (SPA), основанное на Angular, с дальнейшим подсчетом просмотров. Подход может быть легко расширен для сбора других метрик, хотя я полагаю, что подсчет количества просмотров - уже довольно неплохо для начала.\n\nЧтобы google analytics заработала, необходимо добавить кусок GATC (google analytics tracking code) на каждую страницу сайта. Этот код может быть получен с админской страницы Вашего google analytics аккаунта. Google время от времени изменяет этот код, однако, на момент написания он выглядит так:","url":"/google-analytics-in-angular.html"},{"title":"Вторая итерация завершена","dateCreated":"2014-08-13","id":"second-iteration-completed","tags":[],"header":"#### Что добавлено \nЯ только что закончил вторую итерацию по разработке своего сайта.\n- [локализиция дат](/dates-localization-in-angular.html);\n- пейджинг списка заметок;\n- оптимизация хранилища на стороне сервера;\n- [google analytics](/google-analytics-in-angular.html);\n- язык по умолчанию теперь русский.\n\n#### Отложенные задачи\n- миграция старых статей, потому что я решил сосредоточиться на новом контенте и оставить старый блог как есть;\n- автоматическая проверка орфографии, так как количество заметок, которые я пишу, не велико, ручной проверки при помощи сторонних инструментов должно хватить.","url":"/second-iteration-completed.html"},{"title":"Минималистичный подход к созданию личного сайта","dateCreated":"2017-05-27","id":"minimalistic-approach-for-creating-personal-website","tags":[],"header":"#### Годы идут\nМодные практики уступают место прагматизму и минимизации затрат на поддержку. Новый опыт заставил меня пересмотреть свое отношение к этому сайту. Основные идеи я решил изложить ниже.\n\n#### Одностраничный дизайн не нужен\nГлавными преимуществами одностраничного подхода являются отзывчивость пользовательского интерфейса и более простое управление состоянием. Если страницы сайта похожи, одностраничное приложение позволяет загрузить шаблон один раз и использовать его повторно.\n\nК основным недостаткам относятся SEO и необходимость дополнительных библиотек для обработки маршрутизации и истории. Если следовать веяниям времени, то скорее всего выбор будет сделан в пользу одного из популярных средств разработки (Angular, Amber, React, Aurelia и так далее).\n\nДля личного сайта отзывчивость интерфейса не нужна, так как взаимодействие с пользователем сведено к минимуму. По той же причине управление состоянием не является проблемой. Доля содержимого сайта на страницах высока, а это значит, что большинство страниц сайта будут сильно различаться.","url":"/minimalistic-approach-for-creating-personal-website.html"},{"title":"Задачи Gulp для создания статического сайта","dateCreated":"2017-06-22","id":"gulp-tasks-for-creating-static-website","tags":["gulp"],"header":"#### Хранение данных\nПрежде чем описывать манипуляции с данными, которые приводят к появлению готовой разметки, нужно понять, как эти данные хранить. В предыдущей статье были высказаны аргументы в пользу простого текста в текстовых файлах. Какую структуру каталогов выбрать? \n\nОчевидным шагом будет отделение содержимого сайта от его представления. Потому содержимое и представление размещено в двух каталогах: \"model\" и \"view\" соответственно. Далее речь пойдет об устройстве \"model\".","url":"/gulp-tasks-for-creating-static-website.html"},{"title":"Полноэкранное видео в IOS","dateCreated":"2017-11-17","id":"fullscreen-videos-ios","tags":["ios","video","fullscreen"],"header":"#### Как перевести HTML5 видео в полноэкранный режим в IOS?\nОтвет на этот вопрос оказался неочевидным. Быстрый поиск наводит на следующие соображения:\n1. <code>webkitRequestFullScreen</code> – стандартный способ для браузеров на основе webkit (Chrome и Safari). Проблема лишь в том, что на мобильных устройствах под управлением IOS вы этот метод не найдете.\n2. <code>requestFullscreen</code> – может быть так, по стандарту W3C? Тот же эффект.\n3. Посмотрим на [поддержку fullscreen API](https://caniuse.com/#feat=fullscreen) различными браузерами. Легко видеть, что API не поддерживается Safari в IOS. Сразу пробуем Chrome и убеждаемся, что в нем под IOS дела обстоят аналогичным образом.\n\n#### Что делать?\nОтвет пришел неожиданно. Вот [здесь](https://stackoverflow.com/questions/18489680/ios-safari-detect-when-user-clicks-done-in-native-player) есть упоминание о native событии <code>webkitendfullscreen</code>, довольно быстро находится парное к нему событие <code>webkitbeginfullscreen</code>. Наверняка должно быть что-то еще. И действительно, у Apple нашлась [отличная статья](https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/ControllingMediaWithJavaScript/ControllingMediaWithJavaScript.html), в которой показано использование ключевых методов:\n- <code>webkitEnterFullScreen</code>\n- <code>webkitExitFullScreen</code>","url":"/fullscreen-videos-ios.html"}]